/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace HydrogenCreditMarketplace {
  export type ListingStruct = {
    id: BigNumberish;
    seller: AddressLike;
    amount: BigNumberish;
    pricePerUnit: BigNumberish;
    createdAt: BigNumberish;
    isActive: boolean;
  };

  export type ListingStructOutput = [
    id: bigint,
    seller: string,
    amount: bigint,
    pricePerUnit: bigint,
    createdAt: bigint,
    isActive: boolean
  ] & {
    id: bigint;
    seller: string;
    amount: bigint;
    pricePerUnit: bigint;
    createdAt: bigint;
    isActive: boolean;
  };
}

export interface HydrogenCreditMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelListing"
      | "createListing"
      | "emergencyWithdraw"
      | "feeRecipient"
      | "getActiveListings"
      | "getListing"
      | "getMarketplaceStats"
      | "getSellerListings"
      | "hydrogenCredit"
      | "listings"
      | "nextListingId"
      | "owner"
      | "pause"
      | "paused"
      | "platformFeePercent"
      | "purchaseCredits"
      | "renounceOwnership"
      | "sellerListings"
      | "setFeeRecipient"
      | "setPlatformFee"
      | "totalListings"
      | "totalTradedVolume"
      | "transferOwnership"
      | "unpause"
      | "updateListingPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ListingCancelled"
      | "ListingCreated"
      | "OwnershipTransferred"
      | "Paused"
      | "PriceUpdated"
      | "Purchase"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerListings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hydrogenCredit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextListingId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCredits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerListings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTradedVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateListingPrice",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hydrogenCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTradedVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateListingPrice",
    data: BytesLike
  ): Result;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCreatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish,
    pricePerUnit: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    amount: bigint,
    pricePerUnit: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    amount: bigint;
    pricePerUnit: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    oldPrice: bigint,
    newPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    oldPrice: bigint;
    newPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish,
    totalPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    buyer: string,
    seller: string,
    amount: bigint,
    totalPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    buyer: string;
    seller: string;
    amount: bigint;
    totalPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HydrogenCreditMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): HydrogenCreditMarketplace;
  waitForDeployment(): Promise<this>;

  interface: HydrogenCreditMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createListing: TypedContractMethod<
    [amount: BigNumberish, pricePerUnit: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getActiveListings: TypedContractMethod<
    [startId: BigNumberish, endId: BigNumberish],
    [HydrogenCreditMarketplace.ListingStructOutput[]],
    "view"
  >;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [HydrogenCreditMarketplace.ListingStructOutput],
    "view"
  >;

  getMarketplaceStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalListingsCreated: bigint;
        activeListingsCount: bigint;
        totalVolume: bigint;
        feePercent: bigint;
      }
    ],
    "view"
  >;

  getSellerListings: TypedContractMethod<
    [seller: AddressLike],
    [bigint[]],
    "view"
  >;

  hydrogenCredit: TypedContractMethod<[], [string], "view">;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        seller: string;
        amount: bigint;
        pricePerUnit: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  nextListingId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFeePercent: TypedContractMethod<[], [bigint], "view">;

  purchaseCredits: TypedContractMethod<
    [listingId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellerListings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  setFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [newFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalListings: TypedContractMethod<[], [bigint], "view">;

  totalTradedVolume: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateListingPrice: TypedContractMethod<
    [listingId: BigNumberish, newPricePerUnit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [amount: BigNumberish, pricePerUnit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getActiveListings"
  ): TypedContractMethod<
    [startId: BigNumberish, endId: BigNumberish],
    [HydrogenCreditMarketplace.ListingStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [HydrogenCreditMarketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketplaceStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalListingsCreated: bigint;
        activeListingsCount: bigint;
        totalVolume: bigint;
        feePercent: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellerListings"
  ): TypedContractMethod<[seller: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hydrogenCredit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        seller: string;
        amount: bigint;
        pricePerUnit: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextListingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseCredits"
  ): TypedContractMethod<
    [listingId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellerListings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[newFeePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalListings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTradedVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateListingPrice"
  ): TypedContractMethod<
    [listingId: BigNumberish, newPricePerUnit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ListingCreated"
  ): TypedContractEvent<
    ListingCreatedEvent.InputTuple,
    ListingCreatedEvent.OutputTuple,
    ListingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Purchase"
  ): TypedContractEvent<
    PurchaseEvent.InputTuple,
    PurchaseEvent.OutputTuple,
    PurchaseEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ListingCancelled(uint256,address,uint256)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "ListingCreated(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;
    ListingCreated: TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "Purchase(uint256,address,address,uint256,uint256,uint256)": TypedContractEvent<
      PurchaseEvent.InputTuple,
      PurchaseEvent.OutputTuple,
      PurchaseEvent.OutputObject
    >;
    Purchase: TypedContractEvent<
      PurchaseEvent.InputTuple,
      PurchaseEvent.OutputTuple,
      PurchaseEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
