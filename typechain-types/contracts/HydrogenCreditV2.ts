/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace HydrogenCreditV2 {
  export type CreditBatchStruct = {
    batchId: BigNumberish;
    producer: AddressLike;
    amount: BigNumberish;
    plantId: string;
    productionTime: BigNumberish;
    renewableSource: string;
    verificationHash: BytesLike;
    isRetired: boolean;
    ipfsHash: string;
  };

  export type CreditBatchStructOutput = [
    batchId: bigint,
    producer: string,
    amount: bigint,
    plantId: string,
    productionTime: bigint,
    renewableSource: string,
    verificationHash: string,
    isRetired: boolean,
    ipfsHash: string
  ] & {
    batchId: bigint;
    producer: string;
    amount: bigint;
    plantId: string;
    productionTime: bigint;
    renewableSource: string;
    verificationHash: string;
    isRetired: boolean;
    ipfsHash: string;
  };

  export type ProducerStruct = {
    plantId: string;
    location: string;
    renewableSource: string;
    totalProduced: BigNumberish;
    registrationTime: BigNumberish;
    monthlyProductionLimit: BigNumberish;
    currentMonthProduction: BigNumberish;
    lastProductionMonth: BigNumberish;
    isActive: boolean;
    isVerified: boolean;
  };

  export type ProducerStructOutput = [
    plantId: string,
    location: string,
    renewableSource: string,
    totalProduced: bigint,
    registrationTime: bigint,
    monthlyProductionLimit: bigint,
    currentMonthProduction: bigint,
    lastProductionMonth: bigint,
    isActive: boolean,
    isVerified: boolean
  ] & {
    plantId: string;
    location: string;
    renewableSource: string;
    totalProduced: bigint;
    registrationTime: bigint;
    monthlyProductionLimit: bigint;
    currentMonthProduction: bigint;
    lastProductionMonth: bigint;
    isActive: boolean;
    isVerified: boolean;
  };
}

export interface HydrogenCreditV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "creditBatches"
      | "deactivateProducer"
      | "decimals"
      | "getAllProducers"
      | "getContractStats"
      | "getCreditBatch"
      | "getProducer"
      | "getProducerBatches"
      | "getRegisteredProducersCount"
      | "getRemainingMonthlyCapacity"
      | "issueCreditsFromVerification"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "producerBatches"
      | "producers"
      | "productionOracle"
      | "reactivateProducer"
      | "registerProducer"
      | "registeredProducers"
      | "renounceOwnership"
      | "retireCredits"
      | "retiredCredits"
      | "setProducerVerification"
      | "symbol"
      | "totalCreditBatches"
      | "totalRetiredCredits"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "updateProductionLimit"
      | "updateProductionOracle"
      | "usedVerifications"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CreditIssued"
      | "CreditRetired"
      | "CreditTransferred"
      | "OracleUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "ProducerRegistered"
      | "ProductionLimitUpdated"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditBatches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateProducer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllProducers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProducer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProducerBatches",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredProducersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingMonthlyCapacity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCreditsFromVerification",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "producerBatches",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "producers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "productionOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateProducer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProducer",
    values: [AddressLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredProducers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireCredits",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "retiredCredits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProducerVerification",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalCreditBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRetiredCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProductionLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductionOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedVerifications",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducerBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredProducersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingMonthlyCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCreditsFromVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "producerBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "producers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productionOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredProducers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retiredCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProducerVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCreditBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRetiredCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProductionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductionOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedVerifications",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditIssuedEvent {
  export type InputTuple = [
    producer: AddressLike,
    amount: BigNumberish,
    plantId: string,
    timestamp: BigNumberish,
    renewableSource: string,
    verificationHash: BytesLike
  ];
  export type OutputTuple = [
    producer: string,
    amount: bigint,
    plantId: string,
    timestamp: bigint,
    renewableSource: string,
    verificationHash: string
  ];
  export interface OutputObject {
    producer: string;
    amount: bigint;
    plantId: string;
    timestamp: bigint;
    renewableSource: string;
    verificationHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditRetiredEvent {
  export type InputTuple = [
    owner: AddressLike,
    amount: BigNumberish,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    amount: bigint,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    amount: bigint;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditTransferredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [oldOracle: AddressLike, newOracle: AddressLike];
  export type OutputTuple = [oldOracle: string, newOracle: string];
  export interface OutputObject {
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProducerRegisteredEvent {
  export type InputTuple = [
    producer: AddressLike,
    plantId: string,
    location: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    producer: string,
    plantId: string,
    location: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    producer: string;
    plantId: string;
    location: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductionLimitUpdatedEvent {
  export type InputTuple = [producer: AddressLike, newLimit: BigNumberish];
  export type OutputTuple = [producer: string, newLimit: bigint];
  export interface OutputObject {
    producer: string;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HydrogenCreditV2 extends BaseContract {
  connect(runner?: ContractRunner | null): HydrogenCreditV2;
  waitForDeployment(): Promise<this>;

  interface: HydrogenCreditV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  creditBatches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        bigint,
        string,
        string,
        boolean,
        string
      ] & {
        batchId: bigint;
        producer: string;
        amount: bigint;
        plantId: string;
        productionTime: bigint;
        renewableSource: string;
        verificationHash: string;
        isRetired: boolean;
        ipfsHash: string;
      }
    ],
    "view"
  >;

  deactivateProducer: TypedContractMethod<
    [producer: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  getAllProducers: TypedContractMethod<[], [string[]], "view">;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalSupply: bigint;
        totalBatches: bigint;
        totalRetired: bigint;
        producerCount: bigint;
        verifiedProducerCount: bigint;
      }
    ],
    "view"
  >;

  getCreditBatch: TypedContractMethod<
    [batchId: BigNumberish],
    [HydrogenCreditV2.CreditBatchStructOutput],
    "view"
  >;

  getProducer: TypedContractMethod<
    [producer: AddressLike],
    [HydrogenCreditV2.ProducerStructOutput],
    "view"
  >;

  getProducerBatches: TypedContractMethod<
    [producer: AddressLike],
    [bigint[]],
    "view"
  >;

  getRegisteredProducersCount: TypedContractMethod<[], [bigint], "view">;

  getRemainingMonthlyCapacity: TypedContractMethod<
    [producer: AddressLike],
    [bigint],
    "view"
  >;

  issueCreditsFromVerification: TypedContractMethod<
    [verificationHash: BytesLike],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  producerBatches: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  producers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        plantId: string;
        location: string;
        renewableSource: string;
        totalProduced: bigint;
        registrationTime: bigint;
        monthlyProductionLimit: bigint;
        currentMonthProduction: bigint;
        lastProductionMonth: bigint;
        isActive: boolean;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  productionOracle: TypedContractMethod<[], [string], "view">;

  reactivateProducer: TypedContractMethod<
    [producer: AddressLike],
    [void],
    "nonpayable"
  >;

  registerProducer: TypedContractMethod<
    [
      producer: AddressLike,
      plantId: string,
      location: string,
      renewableSource: string,
      monthlyLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registeredProducers: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retireCredits: TypedContractMethod<
    [amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  retiredCredits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setProducerVerification: TypedContractMethod<
    [producer: AddressLike, verified: boolean],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalCreditBatches: TypedContractMethod<[], [bigint], "view">;

  totalRetiredCredits: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateProductionLimit: TypedContractMethod<
    [producer: AddressLike, newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProductionOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  usedVerifications: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditBatches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        bigint,
        string,
        string,
        boolean,
        string
      ] & {
        batchId: bigint;
        producer: string;
        amount: bigint;
        plantId: string;
        productionTime: bigint;
        renewableSource: string;
        verificationHash: string;
        isRetired: boolean;
        ipfsHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivateProducer"
  ): TypedContractMethod<[producer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllProducers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalSupply: bigint;
        totalBatches: bigint;
        totalRetired: bigint;
        producerCount: bigint;
        verifiedProducerCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreditBatch"
  ): TypedContractMethod<
    [batchId: BigNumberish],
    [HydrogenCreditV2.CreditBatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProducer"
  ): TypedContractMethod<
    [producer: AddressLike],
    [HydrogenCreditV2.ProducerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProducerBatches"
  ): TypedContractMethod<[producer: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRegisteredProducersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingMonthlyCapacity"
  ): TypedContractMethod<[producer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "issueCreditsFromVerification"
  ): TypedContractMethod<[verificationHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "producerBatches"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "producers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        plantId: string;
        location: string;
        renewableSource: string;
        totalProduced: bigint;
        registrationTime: bigint;
        monthlyProductionLimit: bigint;
        currentMonthProduction: bigint;
        lastProductionMonth: bigint;
        isActive: boolean;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "productionOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reactivateProducer"
  ): TypedContractMethod<[producer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerProducer"
  ): TypedContractMethod<
    [
      producer: AddressLike,
      plantId: string,
      location: string,
      renewableSource: string,
      monthlyLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredProducers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retireCredits"
  ): TypedContractMethod<
    [amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retiredCredits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setProducerVerification"
  ): TypedContractMethod<
    [producer: AddressLike, verified: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalCreditBatches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRetiredCredits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProductionLimit"
  ): TypedContractMethod<
    [producer: AddressLike, newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductionOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedVerifications"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CreditIssued"
  ): TypedContractEvent<
    CreditIssuedEvent.InputTuple,
    CreditIssuedEvent.OutputTuple,
    CreditIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CreditRetired"
  ): TypedContractEvent<
    CreditRetiredEvent.InputTuple,
    CreditRetiredEvent.OutputTuple,
    CreditRetiredEvent.OutputObject
  >;
  getEvent(
    key: "CreditTransferred"
  ): TypedContractEvent<
    CreditTransferredEvent.InputTuple,
    CreditTransferredEvent.OutputTuple,
    CreditTransferredEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProducerRegistered"
  ): TypedContractEvent<
    ProducerRegisteredEvent.InputTuple,
    ProducerRegisteredEvent.OutputTuple,
    ProducerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProductionLimitUpdated"
  ): TypedContractEvent<
    ProductionLimitUpdatedEvent.InputTuple,
    ProductionLimitUpdatedEvent.OutputTuple,
    ProductionLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CreditIssued(address,uint256,string,uint256,string,bytes32)": TypedContractEvent<
      CreditIssuedEvent.InputTuple,
      CreditIssuedEvent.OutputTuple,
      CreditIssuedEvent.OutputObject
    >;
    CreditIssued: TypedContractEvent<
      CreditIssuedEvent.InputTuple,
      CreditIssuedEvent.OutputTuple,
      CreditIssuedEvent.OutputObject
    >;

    "CreditRetired(address,uint256,string,uint256)": TypedContractEvent<
      CreditRetiredEvent.InputTuple,
      CreditRetiredEvent.OutputTuple,
      CreditRetiredEvent.OutputObject
    >;
    CreditRetired: TypedContractEvent<
      CreditRetiredEvent.InputTuple,
      CreditRetiredEvent.OutputTuple,
      CreditRetiredEvent.OutputObject
    >;

    "CreditTransferred(address,address,uint256,uint256)": TypedContractEvent<
      CreditTransferredEvent.InputTuple,
      CreditTransferredEvent.OutputTuple,
      CreditTransferredEvent.OutputObject
    >;
    CreditTransferred: TypedContractEvent<
      CreditTransferredEvent.InputTuple,
      CreditTransferredEvent.OutputTuple,
      CreditTransferredEvent.OutputObject
    >;

    "OracleUpdated(address,address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProducerRegistered(address,string,string,uint256)": TypedContractEvent<
      ProducerRegisteredEvent.InputTuple,
      ProducerRegisteredEvent.OutputTuple,
      ProducerRegisteredEvent.OutputObject
    >;
    ProducerRegistered: TypedContractEvent<
      ProducerRegisteredEvent.InputTuple,
      ProducerRegisteredEvent.OutputTuple,
      ProducerRegisteredEvent.OutputObject
    >;

    "ProductionLimitUpdated(address,uint256)": TypedContractEvent<
      ProductionLimitUpdatedEvent.InputTuple,
      ProductionLimitUpdatedEvent.OutputTuple,
      ProductionLimitUpdatedEvent.OutputObject
    >;
    ProductionLimitUpdated: TypedContractEvent<
      ProductionLimitUpdatedEvent.InputTuple,
      ProductionLimitUpdatedEvent.OutputTuple,
      ProductionLimitUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
