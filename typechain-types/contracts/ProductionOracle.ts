/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ProductionOracle {
  export type ProductionDataStruct = {
    producer: AddressLike;
    plantId: string;
    amount: BigNumberish;
    productionTime: BigNumberish;
    submissionTime: BigNumberish;
    dataHash: BytesLike;
    isVerified: boolean;
    verifier: AddressLike;
    ipfsHash: string;
  };

  export type ProductionDataStructOutput = [
    producer: string,
    plantId: string,
    amount: bigint,
    productionTime: bigint,
    submissionTime: bigint,
    dataHash: string,
    isVerified: boolean,
    verifier: string,
    ipfsHash: string
  ] & {
    producer: string;
    plantId: string;
    amount: bigint;
    productionTime: bigint;
    submissionTime: bigint;
    dataHash: string;
    isVerified: boolean;
    verifier: string;
    ipfsHash: string;
  };
}

export interface ProductionOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_VERIFIERS_REQUIRED"
      | "VERIFICATION_TIMEOUT"
      | "activeVerifiers"
      | "addVerifier"
      | "cleanupExpiredVerifications"
      | "getActiveVerifiers"
      | "getPendingVerifications"
      | "getProducerSubmissions"
      | "getProductionData"
      | "isProductionVerified"
      | "owner"
      | "pause"
      | "paused"
      | "pendingVerifications"
      | "producerSubmissions"
      | "productionRecords"
      | "removeVerifier"
      | "renounceOwnership"
      | "setVerificationFee"
      | "submitProductionData"
      | "transferOwnership"
      | "unpause"
      | "verificationFee"
      | "verifierReputationScore"
      | "verifiers"
      | "verifyProductionData"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "ProductionDataSubmitted"
      | "ProductionDataVerified"
      | "Unpaused"
      | "VerifierAdded"
      | "VerifierRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_VERIFIERS_REQUIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFICATION_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupExpiredVerifications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingVerifications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProducerSubmissions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductionData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProductionVerified",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingVerifications",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "producerSubmissions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productionRecords",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProductionData",
    values: [AddressLike, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verificationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifierReputationScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProductionData",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_VERIFIERS_REQUIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFICATION_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanupExpiredVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducerSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProductionVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "producerSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProductionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verificationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifierReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProductionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductionDataSubmittedEvent {
  export type InputTuple = [
    producer: AddressLike,
    plantId: string,
    amount: BigNumberish,
    timestamp: BigNumberish,
    dataHash: BytesLike
  ];
  export type OutputTuple = [
    producer: string,
    plantId: string,
    amount: bigint,
    timestamp: bigint,
    dataHash: string
  ];
  export interface OutputObject {
    producer: string;
    plantId: string;
    amount: bigint;
    timestamp: bigint;
    dataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductionDataVerifiedEvent {
  export type InputTuple = [
    producer: AddressLike,
    plantId: string,
    amount: BigNumberish,
    timestamp: BigNumberish,
    verifier: AddressLike
  ];
  export type OutputTuple = [
    producer: string,
    plantId: string,
    amount: bigint,
    timestamp: bigint,
    verifier: string
  ];
  export interface OutputObject {
    producer: string;
    plantId: string;
    amount: bigint;
    timestamp: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAddedEvent {
  export type InputTuple = [verifier: AddressLike, name: string];
  export type OutputTuple = [verifier: string, name: string];
  export interface OutputObject {
    verifier: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRemovedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProductionOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ProductionOracle;
  waitForDeployment(): Promise<this>;

  interface: ProductionOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_VERIFIERS_REQUIRED: TypedContractMethod<[], [bigint], "view">;

  VERIFICATION_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  activeVerifiers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addVerifier: TypedContractMethod<
    [verifier: AddressLike, name: string, organization: string],
    [void],
    "nonpayable"
  >;

  cleanupExpiredVerifications: TypedContractMethod<[], [void], "nonpayable">;

  getActiveVerifiers: TypedContractMethod<[], [string[]], "view">;

  getPendingVerifications: TypedContractMethod<[], [string[]], "view">;

  getProducerSubmissions: TypedContractMethod<
    [producer: AddressLike],
    [string[]],
    "view"
  >;

  getProductionData: TypedContractMethod<
    [dataHash: BytesLike],
    [ProductionOracle.ProductionDataStructOutput],
    "view"
  >;

  isProductionVerified: TypedContractMethod<
    [dataHash: BytesLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingVerifications: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  producerSubmissions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  productionRecords: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string,
        string
      ] & {
        producer: string;
        plantId: string;
        amount: bigint;
        productionTime: bigint;
        submissionTime: bigint;
        dataHash: string;
        isVerified: boolean;
        verifier: string;
        ipfsHash: string;
      }
    ],
    "view"
  >;

  removeVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVerificationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitProductionData: TypedContractMethod<
    [
      producer: AddressLike,
      plantId: string,
      amount: BigNumberish,
      productionTime: BigNumberish,
      ipfsHash: string
    ],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  verificationFee: TypedContractMethod<[], [bigint], "view">;

  verifierReputationScore: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  verifiers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint] & {
        name: string;
        organization: string;
        isActive: boolean;
        verificationCount: bigint;
        registrationTime: bigint;
      }
    ],
    "view"
  >;

  verifyProductionData: TypedContractMethod<
    [dataHash: BytesLike, isValid: boolean],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_VERIFIERS_REQUIRED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFICATION_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeVerifiers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<
    [verifier: AddressLike, name: string, organization: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cleanupExpiredVerifications"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveVerifiers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPendingVerifications"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProducerSubmissions"
  ): TypedContractMethod<[producer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProductionData"
  ): TypedContractMethod<
    [dataHash: BytesLike],
    [ProductionOracle.ProductionDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProductionVerified"
  ): TypedContractMethod<[dataHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingVerifications"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "producerSubmissions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "productionRecords"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string,
        string
      ] & {
        producer: string;
        plantId: string;
        amount: bigint;
        productionTime: bigint;
        submissionTime: bigint;
        dataHash: string;
        isVerified: boolean;
        verifier: string;
        ipfsHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerificationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitProductionData"
  ): TypedContractMethod<
    [
      producer: AddressLike,
      plantId: string,
      amount: BigNumberish,
      productionTime: BigNumberish,
      ipfsHash: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verificationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifierReputationScore"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifiers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint] & {
        name: string;
        organization: string;
        isActive: boolean;
        verificationCount: bigint;
        registrationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProductionData"
  ): TypedContractMethod<
    [dataHash: BytesLike, isValid: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProductionDataSubmitted"
  ): TypedContractEvent<
    ProductionDataSubmittedEvent.InputTuple,
    ProductionDataSubmittedEvent.OutputTuple,
    ProductionDataSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ProductionDataVerified"
  ): TypedContractEvent<
    ProductionDataVerifiedEvent.InputTuple,
    ProductionDataVerifiedEvent.OutputTuple,
    ProductionDataVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAdded"
  ): TypedContractEvent<
    VerifierAddedEvent.InputTuple,
    VerifierAddedEvent.OutputTuple,
    VerifierAddedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRemoved"
  ): TypedContractEvent<
    VerifierRemovedEvent.InputTuple,
    VerifierRemovedEvent.OutputTuple,
    VerifierRemovedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProductionDataSubmitted(address,string,uint256,uint256,bytes32)": TypedContractEvent<
      ProductionDataSubmittedEvent.InputTuple,
      ProductionDataSubmittedEvent.OutputTuple,
      ProductionDataSubmittedEvent.OutputObject
    >;
    ProductionDataSubmitted: TypedContractEvent<
      ProductionDataSubmittedEvent.InputTuple,
      ProductionDataSubmittedEvent.OutputTuple,
      ProductionDataSubmittedEvent.OutputObject
    >;

    "ProductionDataVerified(address,string,uint256,uint256,address)": TypedContractEvent<
      ProductionDataVerifiedEvent.InputTuple,
      ProductionDataVerifiedEvent.OutputTuple,
      ProductionDataVerifiedEvent.OutputObject
    >;
    ProductionDataVerified: TypedContractEvent<
      ProductionDataVerifiedEvent.InputTuple,
      ProductionDataVerifiedEvent.OutputTuple,
      ProductionDataVerifiedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerifierAdded(address,string)": TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
    VerifierAdded: TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;

    "VerifierRemoved(address)": TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
    VerifierRemoved: TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
  };
}
